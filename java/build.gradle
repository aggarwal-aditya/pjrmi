/*
 * The Gradle build file for the Java portion of deshaw-pjrmi.
 */

plugins {
    id 'java-library'
}

// Quieten JavaDoc warnings for missing tags. There are some classes which we
// specifically have imperfect JavaDoc for and the warnings don't really help.
javadoc {
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

// Configuration from the outside world.
def SNAPPY = 'org.xerial.snappy:snappy-java:' + snappyVersion

// Support for Vectorized math.
ext {
    // The user-given parameter that is used to decide whether to include
    // vectorized classes when building:
    //   ./gradlew build -PincludeVectorized
    INCLUDE_VECTORIZED = 'includeVectorized'
}


// Choose which Java version to use, for the general population. This section
// can be commented out if you want to let the build pick up the Java version
// from the environment, though read the comments about Vectorized support.
java {
    if (project.hasProperty(INCLUDE_VECTORIZED)) {
        // PJRmi is specifically Java11 so as not to force users to later
        // versions. However, as of 20230906, the Vector API incubator module
        // is only available in Java17.
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(17))
        }
    }
    else {
        // PJRmi is specifically Java11 so as not to force users to later
        // versions, if they have dependencies, so enforce this in the build.
        toolchain {
            languageVersion = JavaLanguageVersion.of(11)
         }
    }
}

jar {
    // Just the raw 'pjrmi.jar' name, unversioned. This is deployed as a
    // resource for the Python package and is therefore scoped by that.
    archiveBaseName = 'pjrmi'

    // Make fat-jar to make python packaging easier.
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Add the agent info to the manifest file
    manifest {
        attributes 'Agent-Class'             : 'com.deshaw.pjrmi.PJRmiAgent'
        attributes 'Premain-Class'           : 'com.deshaw.pjrmi.PJRmiAgent'
        attributes 'Can-Redefine-Classes'    : 'true'
        attributes 'Can-Retransform-Classes' : 'true'
    }
}

compileJava {
    options.compilerArgs << '-parameters'
}

repositories {
    mavenCentral()
}

test {
    // These tests need space
    maxHeapSize = "4g"

    // We need the Python build for the tests since we call into it from Java,
    // and we need the JNI library since we use that too.
    dependsOn project(":python")  .getTasks().getByPath(":python:buildExt")
    dependsOn project(":java:jni").getTasks().getByPath(":java:jni:build")

    // Ensure that we pick up the versions of the code from this tree, and not
    // from any installation.
    environment    "LD_LIBRARY_PATH",   "$rootDir/cpp/build/lib/main/debug"
    environment    "PYTHONPATH",        "$rootDir/python"
    systemProperty "java.library.path", "$rootDir/java/jni/build/lib/main/debug"

    useJUnitPlatform()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

    // compileOnly because we're creating a fat-jar with all the compile-time
    // dependencies.
    compileOnly SNAPPY
}

// Add the Vector API incubator module when the 'includeVectorized' build
// parameter is passed. Otherwise, exclude the vectorized files that include
// this module from the build.
sourceSets {
    main {
        java {
            if (project.hasProperty(INCLUDE_VECTORIZED)) {
                // Include the Vector API incubator module when building
                compileJava {
                    options.compilerArgs.addAll(['--enable-preview', '--add-modules', 'jdk.incubator.vector'])
                }
                compileTestJava {
                    options.compilerArgs += ['--add-modules', 'jdk.incubator.vector']
                }
                tasks.withType(Test) {
                    jvmArgs += ["--enable-preview", "--add-modules", "jdk.incubator.vector"]
                }
                tasks.withType(JavaExec) {
                    jvmArgs += ["--enable-preview", "--add-modules", "jdk.incubator.vector"]
                }
            }
            else {
                // Remove tests for vectorized modules
                exclude '**/Vectorized*.java'
            }
        }
    }

    test {
        java {
            if (!project.hasProperty(INCLUDE_VECTORIZED)) {
                // Remove tests for vectorized modules
                exclude '**/Vectorized*.java'
            }
        }
    }
}
